import threading
from typing import Any, Dict, Generic, List, Optional, Tuple, Type, TypeVar

from .impl.registration import RegistrationListeners
from .msg import AnyMsg

_TService = TypeVar("_TService")
_TRequest = TypeVar("_TRequest", bound=AnyMsg)
_TResponse = TypeVar("_TResponse", bound=AnyMsg)

class ServiceException(Exception): ...

class _Service(Generic[_TService, _TRequest, _TResponse]):
    resolved_name: str = ...
    service_class: Type[_TService] = ...
    request_class: Type[_TRequest] = ...
    response_class: Type[_TResponse] = ...
    uri: Optional[str] = ...
    def __init__(self, name: str, service_class: Any) -> None: ...

class ServiceManager:
    map: Dict[str, _Service[Any, AnyMsg, AnyMsg]] = ...
    lock: threading.RLock = ...
    registration_listeners: RegistrationListeners = ...
    def __init__(
        self, registration_listeners: Optional[RegistrationListeners] = ...
    ) -> None: ...
    def get_services(self) -> List[Tuple[str, str]]: ...
    def unregister_all(self) -> None: ...
    def register(
        self, resolved_service_name: str, service: _Service[Any, AnyMsg, AnyMsg]
    ) -> None: ...
    def unregister(
        self, resolved_service_name: str, service: _Service[Any, AnyMsg, AnyMsg]
    ) -> None: ...
    def get_service(
        self, resolved_service_name: str
    ) -> _Service[Any, AnyMsg, AnyMsg]: ...
