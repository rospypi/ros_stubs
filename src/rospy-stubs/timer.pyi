import threading
from typing import overload

from .rostime import Callable, Duration, Time

class Rate:
    last_time: Time = ...
    sleep_dur: Duration = ...
    def __init__(self, hz: float, reset: bool = ...) -> None: ...
    def remaining(self) -> Time: ...
    def sleep(self) -> None: ...

@overload
def sleep(duration: Duration) -> None: ...
@overload
def sleep(duration: float) -> None: ...

class TimerEvent:
    last_expected: Time = ...
    last_real: Time = ...
    current_expected: Time = ...
    current_real: Time = ...
    last_duration: float = ...
    def __init__(
        self,
        last_expected: Time,
        last_real: Time,
        current_expected: Time,
        current_real: Time,
        last_duration: float,
    ) -> None: ...

class Timer(threading.Thread):
    daemon: bool = ...
    def __init__(
        self,
        period: Duration,
        callback: Callable[[TimerEvent], None],
        oneshot: bool = ...,
        reset: bool = ...,
    ) -> None: ...
    def shutdown(self) -> None: ...
    def run(self) -> None: ...
