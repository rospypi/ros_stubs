from typing import Any, Callable, Dict, Optional, Sequence

from rosgraph.names import ANYTYPE

TOPIC_ANYTYPE = ANYTYPE
SERVICE_ANYTYPE = ANYTYPE

def isstring(s: Any) -> bool: ...
def canonicalize_name(name: str) -> str: ...
def reload_mappings(argv: Sequence[str]) -> None: ...
def initialize_mappings(node_name: str) -> None: ...
def resolve_name_without_node_name(name: str) -> str: ...
def get_mappings() -> Dict[str, str]: ...
def get_resolved_mappings() -> Dict[str, str]: ...
def resolve_name(name: str, caller_id: Optional[str] = ...) -> str: ...
def remap_name(
    name: str, caller_id: Optional[str] = ..., resolved: bool = ...
) -> str: ...
def scoped_name(caller_id: str, name: str) -> str: ...
def valid_name_validator_resolved(
    param_name: str, param_value: str, caller_id: str
) -> str: ...
def valid_name_validator_unresolved(
    param_name: str, param_value: str, caller_id: str
) -> str: ...
def valid_name(param_name: str, resolve: bool = ...) -> Callable[[str, str], str]: ...
def global_name(param_name: str) -> Callable[[str, str], str]: ...
def get_namespace() -> str: ...
def get_name() -> str: ...

get_caller_id = get_name
