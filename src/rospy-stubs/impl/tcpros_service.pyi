# WARNING: Automatically generated by stubgen
# Needs to be fixed manually

from typing import Any, Optional, Union

from genpy.rostime import Duration

from rospy.core import logdebug as logdebug
from rospy.core import logerr as logerr
from rospy.core import loginfo as loginfo
from rospy.core import logwarn as logwarn
from rospy.exceptions import ROSException as ROSException
from rospy.exceptions import ROSInterruptException as ROSInterruptException
from rospy.exceptions import TransportInitError as TransportInitError
from rospy.exceptions import TransportTerminated as TransportTerminated
from rospy.impl.registration import get_service_manager as get_service_manager
from rospy.impl.tcpros_base import DEFAULT_BUFF_SIZE as DEFAULT_BUFF_SIZE
from rospy.impl.tcpros_base import TCPROSTransport as TCPROSTransport
from rospy.impl.tcpros_base import TCPROSTransportProtocol as TCPROSTransportProtocol
from rospy.impl.tcpros_base import (
    get_tcpros_server_address as get_tcpros_server_address,
)
from rospy.impl.tcpros_base import recv_buff as recv_buff
from rospy.impl.tcpros_base import start_tcpros_server as start_tcpros_server
from rospy.service import ServiceException as ServiceException
from rospy.service import _Service

def isstring(s: Any): ...

logger: Any

def wait_for_service(service: Any, timeout: Optional[Union[float, Duration]] = ...): ...
def convert_return_to_response(response: Any, response_class: Any): ...
def service_connection_handler(sock: Any, client_addr: Any, header: Any): ...

class TCPService(TCPROSTransportProtocol):
    service_class: Any = ...
    def __init__(
        self, resolved_name: Any, service_class: Any, buff_size: Any = ...
    ) -> None: ...
    def get_header_fields(self): ...

class TCPROSServiceClient(TCPROSTransportProtocol):
    service_class: Any = ...
    headers: Any = ...
    buff_size: Any = ...
    def __init__(
        self,
        resolved_name: Any,
        service_class: Any,
        headers: Optional[Any] = ...,
        buff_size: Any = ...,
    ) -> None: ...
    def get_header_fields(self): ...
    def read_messages(self, b: Any, msg_queue: Any, sock: Any) -> None: ...

class ServiceProxy(_Service):
    uri: Any = ...
    seq: int = ...
    buff_size: Any = ...
    persistent: Any = ...
    protocol: Any = ...
    transport: Any = ...
    def __init__(
        self,
        name: Any,
        service_class: Any,
        persistent: bool = ...,
        headers: Optional[Any] = ...,
    ) -> None: ...
    def wait_for_service(self, timeout: Optional[Union[float, Duration]] = ...) -> None: ...
    def __call__(self, *args: Any, **kwds: Any): ...
    def call(self, *args: Any, **kwds: Any): ...
    def close(self) -> None: ...

class ServiceImpl(_Service):
    handler: Any = ...
    registered: bool = ...
    seq: int = ...
    done: bool = ...
    buff_size: Any = ...
    uri: Any = ...
    protocol: Any = ...
    def __init__(
        self,
        name: Any,
        service_class: Any,
        handler: Any,
        buff_size: Any = ...,
        error_handler: Optional[Any] = ...,
    ) -> None: ...
    def error_handler(self, e: Any, exc_type: Any, exc_value: Any, tb: Any) -> None: ...
    def shutdown(self, reason: str = ...) -> None: ...
    def spin(self) -> None: ...
    def handle(self, transport: Any, header: Any) -> None: ...

class Service(ServiceImpl):
    def __init__(
        self,
        name: Any,
        service_class: Any,
        handler: Any,
        buff_size: Any = ...,
        error_handler: Optional[Any] = ...,
    ) -> None: ...
