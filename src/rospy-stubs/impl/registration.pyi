# WARNING: Automatically generated by stubgen
# Needs to be fixed manually

from typing import Any

from rospy.core import add_preshutdown_hook as add_preshutdown_hook
from rospy.core import is_shutdown as is_shutdown
from rospy.core import is_shutdown_requested as is_shutdown_requested
from rospy.core import logdebug as logdebug
from rospy.core import logerr as logerr
from rospy.core import logfatal as logfatal
from rospy.core import loginfo as loginfo
from rospy.core import logwarn as logwarn
from rospy.core import signal_shutdown as signal_shutdown
from rospy.core import xmlrpcapi as xmlrpcapi
from rospy.names import get_caller_id as get_caller_id
from rospy.names import get_namespace as get_namespace

def set_topic_manager(tm: Any) -> None: ...
def get_topic_manager(): ...
def set_service_manager(sm: Any) -> None: ...
def get_service_manager(): ...

class Registration:
    PUB: str = ...
    SUB: str = ...
    SRV: str = ...

class RegistrationListener:
    def reg_added(
        self, resolved_name: Any, data_type_or_uri: Any, reg_type: Any
    ) -> None: ...
    def reg_removed(
        self, resolved_name: Any, data_type_or_uri: Any, reg_type: Any
    ) -> None: ...

class RegistrationListeners:
    listeners: Any = ...
    lock: Any = ...
    def __init__(self) -> None: ...
    def add_listener(self, l: Any) -> None: ...
    def notify_removed(
        self, resolved_name: Any, data_type_or_uri: Any, reg_type: Any
    ) -> None: ...
    def notify_added(
        self, resolved_name: Any, data_type: Any, reg_type: Any
    ) -> None: ...
    def clear(self) -> None: ...

def get_registration_listeners(): ...

class RegManager(RegistrationListener):
    logger: Any = ...
    handler: Any = ...
    uri: Any = ...
    updates: Any = ...
    cond: Any = ...
    registered: bool = ...
    def __init__(self, handler: Any) -> None: ...
    master_uri: Any = ...
    def start(self, uri: Any, master_uri: Any) -> None: ...
    def is_registered(self): ...
    def run(self) -> None: ...
    def cleanup(self, reason: Any) -> None: ...
    def reg_removed(
        self, resolved_name: Any, data_type_or_uri: Any, reg_type: Any
    ) -> None: ...
    def reg_added(
        self, resolved_name: Any, data_type_or_uri: Any, reg_type: Any
    ) -> None: ...
    def publisher_update(self, resolved_name: Any, uris: Any) -> None: ...
