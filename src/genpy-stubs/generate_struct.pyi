from typing import List, Optional, Sequence

def add_pattern(p: str) -> None: ...
def clear_patterns() -> None: ...
def get_patterns() -> List[str]: ...
def compute_struct_pattern(types: Sequence[str]) -> Optional[str]: ...
def reduce_pattern(pattern: str) -> str: ...
def serialize(expr: str) -> str: ...
def int32_pack(var: str) -> str: ...
def int32_unpack(var: str, buff: str) -> str: ...
def pack(pattern: str, vars_: str) -> str: ...
def pack2(pattern: str, vars_: str) -> str: ...
def unpack(var: str, pattern: str, buff: str) -> str: ...
def unpack2(var: str, pattern: str, buff: str) -> str: ...
def unpack3(var: str, struct_var: str, buff: str) -> str: ...
