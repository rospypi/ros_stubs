from typing import Any, List, Optional, Tuple

def bare_msg_type(msg_type: str) -> str: ...
def resolve_type(msg_type: str, package_context: str) -> str: ...
def parse_type(msg_type: str) -> Tuple[str, bool, Optional[int]]: ...
def is_valid_msg_type(x: str) -> bool: ...
def is_valid_constant_type(x: str) -> bool: ...
def is_valid_msg_field_name(x: str) -> bool: ...

class Constant:
    type: str = ...
    name: str = ...
    val: str = ...
    val_text: str = ...
    def __init__(self, type_: str, name: str, val: str, val_text: str) -> None: ...
    def __eq__(self, other: Any) -> bool: ...

class Field:
    name: str = ...
    type: str = ...
    is_header: bool = ...
    is_builtin: bool = ...
    def __init__(self, name: str, type: str) -> None: ...
    def __eq__(self, other: Any) -> bool: ...

class MsgSpec:
    types: List[str] = ...
    names: List[str] = ...
    constants: List[Constant] = ...
    header_present: bool = ...
    text: str = ...
    full_name: str = ...
    short_name: str = ...
    package: str = ...
    def __init__(
        self,
        types: List[str],
        names: List[str],
        constants: List[Constant],
        text: str,
        full_name: str,
        package: str = ...,
        short_name: str = ...,
    ) -> None: ...
    def fields(self) -> List[Tuple[str, str]]: ...
    def parsed_fields(self) -> List[Field]: ...
    def has_header(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

HEADER: str
TIME: str
DURATION: str
HEADER_FULL_NAME: str

def is_header_type(msg_type: bool) -> bool: ...

TIME_MSG: str
DURATION_MSG: str
PRIMITIVE_TYPES: List[str]
BUILTIN_TYPES: List[str]

def is_builtin(msg_type_name: str) -> bool: ...
